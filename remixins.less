// ===== REM UNIT MIXINS ====
@baseValue: 10; // root font size. @baseValue MUST ME AN INTEGER.

@convertPXValues: ~`convertPXValues = function(values){
	var PXValues = '';
	values = values.replace(/[\])}[{(]/g,'').split(',');
	for(var i=0;i<values.length;i++)
		PXValues += i === 0 ? getPXValue(values[i]) : ' '+getPXValue(values[i]);
	return PXValues;
}`;

@getPXValue: ~`getPXValue = function(a){
	return a.indexOf('px') !== -1 ? parseInt(a.replace(/(^\d+)(.+$)/i,'$1')) / @{baseValue} + 'rem' : a;
}`;

// ===== FONT MIXINS =====

.font(@size, @family) {
	font: @arguments;
	font: ~`convertPXValues('@{size}')` @family;
}

.font-size(@value) {
	font-size: @arguments;
	font-size: ~`convertPXValues('@{value}')`;
}

.line-height(@value) {
	line-height: @arguments;
	line-height: ~`convertPXValues('@{value}')`;
}

.text-indent(@value) {
	text-indent: @arguments;
	text-indent: ~`convertPXValues('@{value}')`;
}

// ===== BORDER MIXINS =====

.border(...) {
	border: @arguments;
	border: ~`convertPXValues('@{arguments}')`;
}

// ===== MARGIN MIXINS =====

.margin(...) {
	margin: @arguments;
	margin: ~`convertPXValues('@{arguments}')`;
}

.margin-top(@value) {
	margin-top: @arguments;
	margin-top: ~`convertPXValues('@{value}')`;
}

.margin-right(@value) {
	margin-right: @arguments;
	margin-right: ~`convertPXValues('@{value}')`;
}

.margin-bottom(@value) {
	margin-bottom: @arguments;
	margin-bottom: ~`convertPXValues('@{value}')`;
}

.margin-left(@value) {
	margin-left: @arguments;
	margin-left: ~`convertPXValues('@{value}')`;
}

// ===== PADDING MIXINS =====

.padding(...) {
	padding: @arguments;
	padding: ~`convertPXValues('@{arguments}')`;
}

.padding-top(@value) {
	padding-top: @arguments;
	padding-top: ~`convertPXValues('@{value}')`;
}

.padding-right(@value) {
	padding-right: @arguments;
	padding-right: ~`convertPXValues('@{value}')`;
}

.padding-bottom(@value) {
	padding-bottom: @arguments;
	padding-bottom: ~`convertPXValues('@{value}')`;
}

.padding-left(@value) {
	padding-left: @arguments;
	padding-left: ~`convertPXValues('@{value}')`;
}

// ===== HEIGHT & WIDTH MIXINS =====

.height(@value) {
	height: @arguments;
	height: ~`convertPXValues('@{value}')`;
}

.min-height(@value) {
	min-height: @arguments;
	min-height: ~`convertPXValues('@{value}')`;
}

.max-height(@value) {
	max-height: @arguments;
	max-height: ~`convertPXValues('@{value}')`;
}

.width(@value) {
	width: @arguments;
	width: ~`convertPXValues('@{value}')`;
}

.min-width(@value) {
	min-width: @arguments;
	min-width: ~`convertPXValues('@{value}')`;
}

.max-width(@value) {
	max-width: @arguments;
	max-width: ~`convertPXValues('@{value}')`;
}

// ===== POSITION MIXINS =====

.top(@value) {
	top: @arguments;
	top: ~`convertPXValues('@{value}')`;
}

.left(@value) {
	left: @arguments;
	left: ~`convertPXValues('@{value}')`;
}

.right(@value) {
	right: @arguments;
	right: ~`convertPXValues('@{value}')`;
}

.bottom(@value) {
	bottom: @arguments;
	bottom: ~`convertPXValues('@{value}')`;
}


/*
Sample Case

.rem-mixins-test-class {
	.font-size(10px);
	.line-height(20px);
	.margin(10px);
	.margin(3em);
	.margin(10px, 20px);
	.margin(10px, 20%);
	.margin(0px , 20px);
	.margin(5px , auto, 3%, 15px);
	.margin-top(2%);
	.margin-top(2px);
	.padding(10px);
	.padding(3em);
	.padding(10px, 20px);
	.padding(10px, 20%);
	.padding(3em, 20px);
	.padding(3em, 20px, 15px, 30px);
}

The above will produce this...

.rem-mixins-test-class {
	font-size: 10px;
	font-size: 1rem;
	line-height: 20px;
	line-height: 2rem;
	margin: 10px;
	margin: 1rem;
	margin: 3em;
	margin: 10px 20px;
	margin: 1rem 2rem;
	margin: 10px 20%;
	margin: 1rem  20%;
	margin: 0px 20px;
	margin: 0rem 2rem;
	margin: 5px auto 3% 15px;
	margin: 0.5rem  auto  3% 1.5rem;
	margin-top: 2%;
	margin-top: 2px;
	margin-top: 0.2rem;
	padding: 10px;
	padding: 1rem;
	padding: 3em;
	padding: 10px 20px;
	padding: 1rem 2rem;
	padding: 10px 20%;
	padding: 1rem  20%;
	padding: 3em 20px;
	padding: 3em 2rem;
	padding: 3em 20px 15px 30px;
	padding: 3em 2rem 1.5rem 3rem;
}
*/