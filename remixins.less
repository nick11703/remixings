// Rem Units Cheat Sheet
// -----------------------------------------------------------
// Fonts
// --------------------------------
// .font-size(@value);
// .line-height(@value);
// .text-indent(@value);
// .letter-spacing(@value);
//
// Borders & Outlines
// --------------------------------
// .border-size(@value);
//
// Border shorthand example: .border(2px, dashed, tomato);
// .border(@value, @value, @value);
// .border-top(@value, @value, @value);
// .border-bottom(@value, @value, @value);
// .border-left(@value, @value, @value);
// .border-right(@value, @value, @value);
//
// .ouline(@value, @value, @value);
// .ouline-width(@value);
//
// Border Radius
// --------------------------------
// .border-radius(@value);
// .border-radius(@value, @value);
// .border-radius(@value, @value, @value);
// .border-radius(@value, @value, @value, @value);
// .border-top-left-radius(@value);
// .border-top-right-radius(@value);
// .border-bottom-left-radius(@value);
// .border-bottom-right-radius(@value);
//
// Also allows for any combination of elliptical border radius shorthand
// Must include , /, between horizontal & vertical sets of values. Use: escape(/)
// Examples include but are not limited to:
// .border-radius(@value, escape(/), @value);
// .border-radius(@value, @value, @value, @value, escape(/), @value, @value, @value, @value);
//
// Margins
// --------------------------------
// .margin(@value);
// .margin(@value, @value);
// .margin(@value, @value, @value);
// .margin(@value, @value, @value, @value);
// .margin-top(@value);
// .margin-right(@value);
// .margin-bottom(@value);
// .margin-left(@value);
//
// Paddings
// --------------------------------
// .padding(@value);
// .padding(@value, @value);
// .padding(@value, @value, @value);
// .padding(@value, @value, @value, @value);
// .padding-top(@value);
// .padding-right(@value);
// .padding-bottom(@value);
// .padding-left(@value);
//
// Heights & Widths
// --------------------------------
// .height(@value);
// .min-height(@value);
// .max-height(@value);
// .width(@value);
// .min-width(@value);
// .max-width(@value);
//
// Positioning
// --------------------------------
// .top(@value);
// .left(@value);
// .bottom(@value);
// .right(@value);
//
// Backgrounds
// --------------------------------
// .background-size(@value);
// .background-size(@value, @value);
//
// Also accepts any combination of the background shorthand
// .background(@value, @value, @value, @value, @value, @value);
//
// Shadows
// --------------------------------
// Accepts any combination of the box-shadow and text-shadow shorthand
// .box-shadow(@value, @value, @value, @value, @value, @value);
// .text-shadow(@value, @value, @value, @value);


// ===== REM UNIT MIXINS ====
@baseValue: 10; // root font size. @baseValue MUST ME AN INTEGER.

@convertPXValues: ~`convertPXValues = function(values){
	var PXValues = '';
	values = values.replace(/[\])}[{(]/g,'').split(',');
	for(var i=0;i<values.length;i++)
		PXValues += i === 0 ? getPXValue(values[i]) : ' '+getPXValue(values[i]);
	return PXValues;
}`;

@getPXValue: ~`getPXValue = function(a){
	return a.indexOf('px') !== -1 ? parseInt(a.replace(/(^\d+)(.+$)/i,'$1')) / @{baseValue} + 'rem' : a;
}`;

// ===== FONT MIXINS =====

.font-size(@value) {
	font-size: @arguments;
	font-size: ~`convertPXValues('@{value}')`;
}

.line-height(@value) {
	line-height: @arguments;
	line-height: ~`convertPXValues('@{value}')`;
}

.text-indent(@value) {
	text-indent: @arguments;
	text-indent: ~`convertPXValues('@{value}')`;
}
.letter-spacing(@value) {
	letter-spacing: @arguments;
	letter-spacing: ~`convertPXValues('@{value}')`;
}

// ===== BORDER & OUTLINE MIXINS =====

.border-size(@value) {
	border-size: @arguments;
	border-size: ~`convertPXValues('@{arguments}')`;
}
.border(...) {
	border: @arguments;
	border: ~`convertPXValues('@{arguments}')`;
}
.border-top(...) {
	border-top: @arguments;
	border-top: ~`convertPXValues('@{arguments}')`;
}
.border-bottom(...) {
	border-bottom: @arguments;
	border-bottom: ~`convertPXValues('@{arguments}')`;
}
.border-left(...) {
	border-left: @arguments;
	border-left: ~`convertPXValues('@{arguments}')`;
}
.border-right(...) {
	border-right: @arguments;
	border-right: ~`convertPXValues('@{arguments}')`;
}
.outline(...) {
	outline: @arguments;
	outline: ~`convertPXValues('@{arguments}')`;
}
.outline-width(@value) {
	outline-width: @arguments;
	outline-width: ~`convertPXValues('@{arguments}')`;
}

// ===== BORDER RADIUS MIXINS =====
.border-radius(...) {
	border-radius: @arguments;
	border-radius: ~`convertPXValues('@{arguments}')`;
}
.border-top-left-radius(@value) {
	border-radius: @arguments;
	border-radius: ~`convertPXValues('@{value}')`;
}
.border-top-right-radius(@value) {
	border-radius: @arguments;
	border-radius: ~`convertPXValues('@{value}')`;
}
.border-bottom-left-radius(@value) {
	border-radius: @arguments;
	border-radius: ~`convertPXValues('@{value}')`;
}
.border-bottom-right-radius(@value) {
	border-radius: @arguments;
	border-radius: ~`convertPXValues('@{value}')`;
}

// ===== MARGIN MIXINS =====

.margin(...) {
	margin: @arguments;
	margin: ~`convertPXValues('@{arguments}')`;
}

.margin-top(@value) {
	margin-top: @arguments;
	margin-top: ~`convertPXValues('@{value}')`;
}

.margin-right(@value) {
	margin-right: @arguments;
	margin-right: ~`convertPXValues('@{value}')`;
}

.margin-bottom(@value) {
	margin-bottom: @arguments;
	margin-bottom: ~`convertPXValues('@{value}')`;
}

.margin-left(@value) {
	margin-left: @arguments;
	margin-left: ~`convertPXValues('@{value}')`;
}

// ===== PADDING MIXINS =====

.padding(...) {
	padding: @arguments;
	padding: ~`convertPXValues('@{arguments}')`;
}

.padding-top(@value) {
	padding-top: @arguments;
	padding-top: ~`convertPXValues('@{value}')`;
}

.padding-right(@value) {
	padding-right: @arguments;
	padding-right: ~`convertPXValues('@{value}')`;
}

.padding-bottom(@value) {
	padding-bottom: @arguments;
	padding-bottom: ~`convertPXValues('@{value}')`;
}

.padding-left(@value) {
	padding-left: @arguments;
	padding-left: ~`convertPXValues('@{value}')`;
}

// ===== HEIGHT & WIDTH MIXINS =====

.height(@value) {
	height: @arguments;
	height: ~`convertPXValues('@{value}')`;
}

.min-height(@value) {
	min-height: @arguments;
	min-height: ~`convertPXValues('@{value}')`;
}

.max-height(@value) {
	max-height: @arguments;
	max-height: ~`convertPXValues('@{value}')`;
}

.width(@value) {
	width: @arguments;
	width: ~`convertPXValues('@{value}')`;
}

.min-width(@value) {
	min-width: @arguments;
	min-width: ~`convertPXValues('@{value}')`;
}

.max-width(@value) {
	max-width: @arguments;
	max-width: ~`convertPXValues('@{value}')`;
}

// ===== POSITION MIXINS =====

.top(@value) {
	top: @arguments;
	top: ~`convertPXValues('@{value}')`;
}

.left(@value) {
	left: @arguments;
	left: ~`convertPXValues('@{value}')`;
}

.right(@value) {
	right: @arguments;
	right: ~`convertPXValues('@{value}')`;
}

.bottom(@value) {
	bottom: @arguments;
	bottom: ~`convertPXValues('@{value}')`;
}

// ===== BACKGROUND MIXINS =====

.background-size(@value) {
	background-size: @arguments;
	background-size: ~`convertPXValues('@{arguments}')`;
}

.background(...) {
	background: @arguments;
	background: ~`convertPXValues('@{arguments}')`;
}

// ===== SHADOW MIXINS =====

.box-shadow(...) {
	background-size: @arguments;
	background-size: ~`convertPXValues('@{arguments}')`;
}
.text-shadow(...) {
	text-size: @arguments;
	text-size: ~`convertPXValues('@{arguments}')`;
}